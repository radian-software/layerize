(ns layerize.equation
  (:require [layerize.util :as util]))

(def N
  "How many thirds of a circle each side rotates in
  one sweep around the solid."
  1)

(def A
  "The major radius of the solid."
  7)

(def a
  "One-third of the minor radius of the solid."
  1)

(def rotation
  "Angle through which to rotate the solid about
  the z-axis."
  1)

(defn parametric-function
  "The parametric function that defines the solid."
  [t u]
  (let [sin-t (Math/sin t)
        cos-t (Math/cos t)
        sin-2t (* 2 sin-t cos-t)
        cos-2t (- (* cos-t cos-t)
                  (* sin-t sin-t))
        sin-u (Math/sin (+ u rotation))
        cos-u (Math/cos (+ u rotation))
        sin-N (Math/sin (* N u 1/3))
        cos-N (Math/cos (* N u 1/3))
        r (+ A
             (* a
                (- (* (+ (* 2 cos-t)
                         cos-2t)
                      cos-N)
                   (* (- (* 2 sin-t)
                         sin-2t)
                      sin-N))))
        z (* a
             (+ (* (+ (* 2 cos-t)
                      cos-2t)
                   sin-N)
                (* (- (* 2 sin-t)
                      sin-2t)
                   cos-N)))]
    [(* r cos-u)
     (* r sin-u)
     z]))

(defn point-mesh
  "Returns a list of points generated by evaluating
  the function at t-count+1 values of u and u-count+1
  values of v.

  Note: takes about 1 second per 1,000,000 points
  generated."
  [t-count u-count]
  (vec (for [u (util/count-range 0 (* 2 Math/PI) t-count)
             v (util/count-range 0 (* 2 Math/PI) u-count)]
         (parametric-function u v))))

(defn cross-section
  "Filters out the points that are farther than
  tolerance from the plane direction = offset (use 0
  for x and 1 for y), and discard coordinate
  direction from each point."
  [points direction offset tolerance]
  (->> points
    (filter (fn [point]
              (<= (Math/abs ^Double (- (nth point direction)
                                       offset))
                  tolerance)))
    (map (fn [point]
           (util/drop-nth point direction)))
    vec))
